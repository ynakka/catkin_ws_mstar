// Generated by gencpp from file mstar_navigation/State6.msg
// DO NOT EDIT!


#ifndef MSTAR_NAVIGATION_MESSAGE_STATE6_H
#define MSTAR_NAVIGATION_MESSAGE_STATE6_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mstar_navigation
{
template <class ContainerAllocator>
struct State6_
{
  typedef State6_<ContainerAllocator> Type;

  State6_()
    : header()
    , state_x(0.0)
    , state_y(0.0)
    , state_theta(0.0)
    , state_dx(0.0)
    , state_dy(0.0)
    , state_dtheta(0.0)  {
    }
  State6_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state_x(0.0)
    , state_y(0.0)
    , state_theta(0.0)
    , state_dx(0.0)
    , state_dy(0.0)
    , state_dtheta(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _state_x_type;
  _state_x_type state_x;

   typedef float _state_y_type;
  _state_y_type state_y;

   typedef float _state_theta_type;
  _state_theta_type state_theta;

   typedef float _state_dx_type;
  _state_dx_type state_dx;

   typedef float _state_dy_type;
  _state_dy_type state_dy;

   typedef float _state_dtheta_type;
  _state_dtheta_type state_dtheta;





  typedef boost::shared_ptr< ::mstar_navigation::State6_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mstar_navigation::State6_<ContainerAllocator> const> ConstPtr;

}; // struct State6_

typedef ::mstar_navigation::State6_<std::allocator<void> > State6;

typedef boost::shared_ptr< ::mstar_navigation::State6 > State6Ptr;
typedef boost::shared_ptr< ::mstar_navigation::State6 const> State6ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mstar_navigation::State6_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mstar_navigation::State6_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mstar_navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'mstar_navigation': ['/home/nvidia/catkin_ws_mstar/src/mstar_navigation/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mstar_navigation::State6_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mstar_navigation::State6_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mstar_navigation::State6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mstar_navigation::State6_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mstar_navigation::State6_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mstar_navigation::State6_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mstar_navigation::State6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8a965f0fe71dba3e08e4248ed66a1c0";
  }

  static const char* value(const ::mstar_navigation::State6_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8a965f0fe71dba3ULL;
  static const uint64_t static_value2 = 0xe08e4248ed66a1c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mstar_navigation::State6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mstar_navigation/State6";
  }

  static const char* value(const ::mstar_navigation::State6_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mstar_navigation::State6_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
float32 state_x\n\
float32 state_y\n\
float32 state_theta\n\
float32 state_dx\n\
float32 state_dy\n\
float32 state_dtheta\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::mstar_navigation::State6_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mstar_navigation::State6_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state_x);
      stream.next(m.state_y);
      stream.next(m.state_theta);
      stream.next(m.state_dx);
      stream.next(m.state_dy);
      stream.next(m.state_dtheta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State6_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mstar_navigation::State6_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mstar_navigation::State6_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state_x: ";
    Printer<float>::stream(s, indent + "  ", v.state_x);
    s << indent << "state_y: ";
    Printer<float>::stream(s, indent + "  ", v.state_y);
    s << indent << "state_theta: ";
    Printer<float>::stream(s, indent + "  ", v.state_theta);
    s << indent << "state_dx: ";
    Printer<float>::stream(s, indent + "  ", v.state_dx);
    s << indent << "state_dy: ";
    Printer<float>::stream(s, indent + "  ", v.state_dy);
    s << indent << "state_dtheta: ";
    Printer<float>::stream(s, indent + "  ", v.state_dtheta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSTAR_NAVIGATION_MESSAGE_STATE6_H
